// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageservice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messageservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace realtime {
namespace messageservice {
class LoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> {
} _LoginRequest_default_instance_;
class LoginReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginReply> {
} _LoginReply_default_instance_;
class AuthenticateMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateMessage> {
} _AuthenticateMessage_default_instance_;
class AuthenticateReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateReply> {
} _AuthenticateReply_default_instance_;
class BaseMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseMessage> {
  public:
  ::google::protobuf::uint64 channelid_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
} _BaseMessage_default_instance_;
class TextMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TextMessage> {
} _TextMessage_default_instance_;
class PhotoMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhotoMessage> {
} _PhotoMessage_default_instance_;
class C2SMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2SMessage> {
  public:
  const ::realtime::messageservice::AuthenticateMessage* authmessage_;
  const ::realtime::messageservice::TextMessage* txt_;
  const ::realtime::messageservice::PhotoMessage* photomsg_;
} _C2SMessage_default_instance_;
class S2CMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2CMessage> {
  public:
  const ::realtime::messageservice::AuthenticateReply* authreply_;
  const ::realtime::messageservice::TextMessage* txt_;
  const ::realtime::messageservice::PhotoMessage* photomsg_;
} _S2CMessage_default_instance_;

namespace protobuf_messageservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, uname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, passw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, apppublickey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, signedtoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, otherdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, errorcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, sessionkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateMessage, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateMessage, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateReply, authenticated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateReply, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateReply, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_BaseMessage_default_instance_), channelid_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_BaseMessage_default_instance_), userid_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_BaseMessage_default_instance_), topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, fromuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, Target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMessage, photoformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMessage, photodata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMessage, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMessage, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SMessage, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SMessage, nonceid_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_C2SMessage_default_instance_), authmessage_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_C2SMessage_default_instance_), txt_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_C2SMessage_default_instance_), photomsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SMessage, messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, commonmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, msgid_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_S2CMessage_default_instance_), authreply_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_S2CMessage_default_instance_), txt_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_S2CMessage_default_instance_), photomsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, anything_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CMessage, Messages_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LoginRequest)},
  { 16, -1, sizeof(LoginReply)},
  { 24, -1, sizeof(AuthenticateMessage)},
  { 31, -1, sizeof(AuthenticateReply)},
  { 39, -1, sizeof(BaseMessage)},
  { 49, -1, sizeof(TextMessage)},
  { 55, -1, sizeof(PhotoMessage)},
  { 64, -1, sizeof(C2SMessage)},
  { 76, -1, sizeof(S2CMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhotoMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2SMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2CMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messageservice.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _LoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LoginReply_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _AuthenticateMessage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AuthenticateReply_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _BaseMessage_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TextMessage_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PhotoMessage_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _C2SMessage_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _S2CMessage_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _LoginRequest_default_instance_.DefaultConstruct();
  _LoginReply_default_instance_.DefaultConstruct();
  _AuthenticateMessage_default_instance_.DefaultConstruct();
  _AuthenticateReply_default_instance_.DefaultConstruct();
  _BaseMessage_default_instance_.DefaultConstruct();
  _TextMessage_default_instance_.DefaultConstruct();
  _PhotoMessage_default_instance_.DefaultConstruct();
  _C2SMessage_default_instance_.DefaultConstruct();
  _S2CMessage_default_instance_.DefaultConstruct();
  _BaseMessage_default_instance_.channelid_ = GOOGLE_ULONGLONG(0);
  _BaseMessage_default_instance_.userid_ = GOOGLE_ULONGLONG(0);
  _BaseMessage_default_instance_.topic_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _C2SMessage_default_instance_.get_mutable()->base_ = const_cast< ::realtime::messageservice::BaseMessage*>(
      ::realtime::messageservice::BaseMessage::internal_default_instance());
  _C2SMessage_default_instance_.authmessage_ = const_cast< ::realtime::messageservice::AuthenticateMessage*>(
      ::realtime::messageservice::AuthenticateMessage::internal_default_instance());
  _C2SMessage_default_instance_.txt_ = const_cast< ::realtime::messageservice::TextMessage*>(
      ::realtime::messageservice::TextMessage::internal_default_instance());
  _C2SMessage_default_instance_.photomsg_ = const_cast< ::realtime::messageservice::PhotoMessage*>(
      ::realtime::messageservice::PhotoMessage::internal_default_instance());
  _S2CMessage_default_instance_.get_mutable()->base_ = const_cast< ::realtime::messageservice::BaseMessage*>(
      ::realtime::messageservice::BaseMessage::internal_default_instance());
  _S2CMessage_default_instance_.authreply_ = const_cast< ::realtime::messageservice::AuthenticateReply*>(
      ::realtime::messageservice::AuthenticateReply::internal_default_instance());
  _S2CMessage_default_instance_.txt_ = const_cast< ::realtime::messageservice::TextMessage*>(
      ::realtime::messageservice::TextMessage::internal_default_instance());
  _S2CMessage_default_instance_.photomsg_ = const_cast< ::realtime::messageservice::PhotoMessage*>(
      ::realtime::messageservice::PhotoMessage::internal_default_instance());
  _S2CMessage_default_instance_.get_mutable()->anything_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024messageservice.proto\022\027realtime.message"
      "service\032\031google/protobuf/any.proto\"\253\003\n\014L"
      "oginRequest\022=\n\004type\030\001 \001(\0162/.realtime.mes"
      "sageservice.LoginRequest.LoginType\022\r\n\005un"
      "ame\030\002 \001(\t\022\016\n\006mobile\030\003 \001(\t\022\r\n\005passw\030\004 \001(\t"
      "\022\r\n\005email\030\005 \001(\t\022\r\n\005token\030\006 \001(\t\022\r\n\005appID\030"
      "\007 \001(\t\022\024\n\014appPublicKey\030\010 \001(\t\022\023\n\013signedTok"
      "en\030\t \001(\t\022\014\n\004data\030\024 \001(\t\022\021\n\totherData\030\025 \001("
      "\t\"\264\001\n\tLoginType\022\014\n\010EUnknown\020\000\022\016\n\nEUnameP"
      "ass\020\001\022\022\n\016EFacebookLogin\020\002\022\020\n\014EGoogleLogi"
      "n\020\003\022\020\n\014EOpenIDLogin\020\004\022\017\n\013EEmailLogin\020\005\022\024"
      "\n\020ESmartTokenLogin\020\006\022\017\n\013EPhoneLogin\020\007\022\r\n"
      "\tEFBAccKit\020\010\022\n\n\006EOther\020d\"\277\001\n\nLoginReply\022"
      "@\n\terrorCode\030\001 \001(\0162-.realtime.messageser"
      "vice.LoginReply.LoginCode\022\016\n\006detail\030\002 \001("
      "\t\022\022\n\nsessionKey\030\003 \001(\t\"K\n\tLoginCode\022\013\n\007Su"
      "ccess\020\000\022\021\n\rWrongPassword\020\001\022\014\n\010BadToken\020\002"
      "\022\020\n\014UnknownError\020\003\"9\n\023AuthenticateMessag"
      "e\022\022\n\nsessionKey\030\001 \001(\t\022\016\n\006userID\030\002 \001(\004\"N\n"
      "\021AuthenticateReply\022\025\n\rauthenticated\030\001 \001("
      "\010\022\022\n\nsessionKey\030\002 \001(\t\022\016\n\006userID\030\003 \001(\004\"`\n"
      "\013BaseMessage\022\023\n\tchannelID\030\001 \001(\004H\000\022\020\n\006use"
      "rID\030\002 \001(\004H\000\022\017\n\005topic\030\003 \001(\tH\000\022\017\n\007fromUID\030"
      "\010 \001(\004B\010\n\006Target\"\033\n\013TextMessage\022\014\n\004text\030\002"
      " \001(\t\"]\n\014PhotoMessage\022\023\n\013photoFormat\030\002 \001("
      "\t\022\021\n\tphotoData\030\003 \001(\t\022\023\n\013description\030\004 \001("
      "\t\022\020\n\010metaData\030\005 \001(\t\"\376\003\n\nC2SMessage\022=\n\004ty"
      "pe\030\001 \001(\0162/.realtime.messageservice.C2SMe"
      "ssage.MessageType\0222\n\004base\030\002 \001(\0132$.realti"
      "me.messageservice.BaseMessage\022\017\n\007nonceID"
      "\030\003 \001(\003\022C\n\013authMessage\030\004 \001(\0132,.realtime.m"
      "essageservice.AuthenticateMessageH\000\0223\n\003t"
      "xt\030\005 \001(\0132$.realtime.messageservice.TextM"
      "essageH\000\0229\n\010photoMsg\030\006 \001(\0132%.realtime.me"
      "ssageservice.PhotoMessageH\000\"\252\001\n\013MessageT"
      "ype\022\021\n\rEAuthenticate\020\000\022\020\n\014ETextMessage\020\001"
      "\022\021\n\rEPhotoMessage\020\002\022\021\n\rEVideoMessage\020\003\022\020"
      "\n\014EDataMessage\020\004\022\020\n\014ELinkMessage\020\005\022\025\n\021EC"
      "ompositeMessage\020\006\022\025\n\021EAnythingMessages\020\017"
      "B\n\n\010messages\"\313\002\n\nS2CMessage\022\025\n\rcommonMes"
      "sage\030\001 \001(\t\0222\n\004base\030\002 \001(\0132$.realtime.mess"
      "ageservice.BaseMessage\022\r\n\005msgID\030\003 \001(\004\022\?\n"
      "\tauthReply\030\005 \001(\0132*.realtime.messageservi"
      "ce.AuthenticateReplyH\000\0223\n\003txt\030\006 \001(\0132$.re"
      "altime.messageservice.TextMessageH\000\0229\n\010p"
      "hotoMsg\030\007 \001(\0132%.realtime.messageservice."
      "PhotoMessageH\000\022&\n\010anything\030\024 \001(\0132\024.googl"
      "e.protobuf.AnyB\n\n\010Messages2e\n\014LoginServi"
      "ce\022U\n\005login\022%.realtime.messageservice.Lo"
      "ginRequest\032#.realtime.messageservice.Log"
      "inReply\"\0002\020\n\016OpenAPIService2\221\003\n\016MessageS"
      "ervice\022b\n\020exchangeMessages\022#.realtime.me"
      "ssageservice.C2SMessage\032#.realtime.messa"
      "geservice.S2CMessage\"\000(\0010\001\022_\n\021sendSingle"
      "Message\022#.realtime.messageservice.C2SMes"
      "sage\032#.realtime.messageservice.S2CMessag"
      "e\"\000\022\\\n\014pollMessages\022#.realtime.messagese"
      "rvice.C2SMessage\032#.realtime.messageservi"
      "ce.S2CMessage\"\0000\001\022\\\n\014pushMessages\022#.real"
      "time.messageservice.C2SMessage\032#.realtim"
      "e.messageservice.S2CMessage\"\000(\001BA\n\037io.gr"
      "pc.realtime.messageserviceB\026RealtimeMess"
      "ageServiceP\001\242\002\003MRCb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messageservice.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_messageservice_2eproto

const ::google::protobuf::EnumDescriptor* LoginRequest_LoginType_descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_enum_descriptors[0];
}
bool LoginRequest_LoginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoginRequest_LoginType LoginRequest::EUnknown;
const LoginRequest_LoginType LoginRequest::EUnamePass;
const LoginRequest_LoginType LoginRequest::EFacebookLogin;
const LoginRequest_LoginType LoginRequest::EGoogleLogin;
const LoginRequest_LoginType LoginRequest::EOpenIDLogin;
const LoginRequest_LoginType LoginRequest::EEmailLogin;
const LoginRequest_LoginType LoginRequest::ESmartTokenLogin;
const LoginRequest_LoginType LoginRequest::EPhoneLogin;
const LoginRequest_LoginType LoginRequest::EFBAccKit;
const LoginRequest_LoginType LoginRequest::EOther;
const LoginRequest_LoginType LoginRequest::LoginType_MIN;
const LoginRequest_LoginType LoginRequest::LoginType_MAX;
const int LoginRequest::LoginType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LoginReply_LoginCode_descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_enum_descriptors[1];
}
bool LoginReply_LoginCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoginReply_LoginCode LoginReply::Success;
const LoginReply_LoginCode LoginReply::WrongPassword;
const LoginReply_LoginCode LoginReply::BadToken;
const LoginReply_LoginCode LoginReply::UnknownError;
const LoginReply_LoginCode LoginReply::LoginCode_MIN;
const LoginReply_LoginCode LoginReply::LoginCode_MAX;
const int LoginReply::LoginCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* C2SMessage_MessageType_descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_enum_descriptors[2];
}
bool C2SMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const C2SMessage_MessageType C2SMessage::EAuthenticate;
const C2SMessage_MessageType C2SMessage::ETextMessage;
const C2SMessage_MessageType C2SMessage::EPhotoMessage;
const C2SMessage_MessageType C2SMessage::EVideoMessage;
const C2SMessage_MessageType C2SMessage::EDataMessage;
const C2SMessage_MessageType C2SMessage::ELinkMessage;
const C2SMessage_MessageType C2SMessage::ECompositeMessage;
const C2SMessage_MessageType C2SMessage::EAnythingMessages;
const C2SMessage_MessageType C2SMessage::MessageType_MIN;
const C2SMessage_MessageType C2SMessage::MessageType_MAX;
const int C2SMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kTypeFieldNumber;
const int LoginRequest::kUnameFieldNumber;
const int LoginRequest::kMobileFieldNumber;
const int LoginRequest::kPasswFieldNumber;
const int LoginRequest::kEmailFieldNumber;
const int LoginRequest::kTokenFieldNumber;
const int LoginRequest::kAppIDFieldNumber;
const int LoginRequest::kAppPublicKeyFieldNumber;
const int LoginRequest::kSignedTokenFieldNumber;
const int LoginRequest::kDataFieldNumber;
const int LoginRequest::kOtherDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile().size() > 0) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  passw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passw().size() > 0) {
    passw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passw_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appid().size() > 0) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  apppublickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.apppublickey().size() > 0) {
    apppublickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apppublickey_);
  }
  signedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signedtoken().size() > 0) {
    signedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signedtoken_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  otherdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.otherdata().size() > 0) {
    otherdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otherdata_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.LoginRequest)
}

void LoginRequest::SharedCtor() {
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apppublickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apppublickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.LoginRequest)
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apppublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .realtime.messageservice.LoginRequest.LoginType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::realtime::messageservice::LoginRequest_LoginType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mobile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.mobile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passw().data(), this->passw().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.passw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.appID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appPublicKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apppublickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apppublickey().data(), this->apppublickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.appPublicKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signedToken = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signedtoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signedtoken().data(), this->signedtoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.signedToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string otherData = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otherdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->otherdata().data(), this->otherdata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginRequest.otherData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .realtime.messageservice.LoginRequest.LoginType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // string mobile = 3;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mobile(), output);
  }

  // string passw = 4;
  if (this->passw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passw().data(), this->passw().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.passw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passw(), output);
  }

  // string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // string token = 6;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token(), output);
  }

  // string appID = 7;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.appID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->appid(), output);
  }

  // string appPublicKey = 8;
  if (this->apppublickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apppublickey().data(), this->apppublickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.appPublicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->apppublickey(), output);
  }

  // string signedToken = 9;
  if (this->signedtoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signedtoken().data(), this->signedtoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.signedToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->signedtoken(), output);
  }

  // string data = 20;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->data(), output);
  }

  // string otherData = 21;
  if (this->otherdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otherdata().data(), this->otherdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.otherData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->otherdata(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .realtime.messageservice.LoginRequest.LoginType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // string mobile = 3;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mobile(), target);
  }

  // string passw = 4;
  if (this->passw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passw().data(), this->passw().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.passw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passw(), target);
  }

  // string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // string token = 6;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // string appID = 7;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.appID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->appid(), target);
  }

  // string appPublicKey = 8;
  if (this->apppublickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apppublickey().data(), this->apppublickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.appPublicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->apppublickey(), target);
  }

  // string signedToken = 9;
  if (this->signedtoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signedtoken().data(), this->signedtoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.signedToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signedtoken(), target);
  }

  // string data = 20;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->data(), target);
  }

  // string otherData = 21;
  if (this->otherdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otherdata().data(), this->otherdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginRequest.otherData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->otherdata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.LoginRequest)
  size_t total_size = 0;

  // string uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // string mobile = 3;
  if (this->mobile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile());
  }

  // string passw = 4;
  if (this->passw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passw());
  }

  // string email = 5;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string token = 6;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string appID = 7;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  // string appPublicKey = 8;
  if (this->apppublickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apppublickey());
  }

  // string signedToken = 9;
  if (this->signedtoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signedtoken());
  }

  // string data = 20;
  if (this->data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // string otherData = 21;
  if (this->otherdata().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->otherdata());
  }

  // .realtime.messageservice.LoginRequest.LoginType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.mobile().size() > 0) {

    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.passw().size() > 0) {

    passw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passw_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.apppublickey().size() > 0) {

    apppublickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apppublickey_);
  }
  if (from.signedtoken().size() > 0) {

    signedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signedtoken_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.otherdata().size() > 0) {

    otherdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otherdata_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  uname_.Swap(&other->uname_);
  mobile_.Swap(&other->mobile_);
  passw_.Swap(&other->passw_);
  email_.Swap(&other->email_);
  token_.Swap(&other->token_);
  appid_.Swap(&other->appid_);
  apppublickey_.Swap(&other->apppublickey_);
  signedtoken_.Swap(&other->signedtoken_);
  data_.Swap(&other->data_);
  otherdata_.Swap(&other->otherdata_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// .realtime.messageservice.LoginRequest.LoginType type = 1;
void LoginRequest::clear_type() {
  type_ = 0;
}
::realtime::messageservice::LoginRequest_LoginType LoginRequest::type() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.type)
  return static_cast< ::realtime::messageservice::LoginRequest_LoginType >(type_);
}
void LoginRequest::set_type(::realtime::messageservice::LoginRequest_LoginType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.type)
}

// string uname = 2;
void LoginRequest::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::uname() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.uname)
  return uname_.GetNoArena();
}
void LoginRequest::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.uname)
}
#if LANG_CXX11
void LoginRequest::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.uname)
}
#endif
void LoginRequest::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.uname)
}
void LoginRequest::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.uname)
}
::std::string* LoginRequest::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_uname() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.uname)
}

// string mobile = 3;
void LoginRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::mobile() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.mobile)
  return mobile_.GetNoArena();
}
void LoginRequest::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.mobile)
}
#if LANG_CXX11
void LoginRequest::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.mobile)
}
#endif
void LoginRequest::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.mobile)
}
void LoginRequest::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.mobile)
}
::std::string* LoginRequest::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.mobile)
}

// string passw = 4;
void LoginRequest::clear_passw() {
  passw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::passw() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.passw)
  return passw_.GetNoArena();
}
void LoginRequest::set_passw(const ::std::string& value) {
  
  passw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.passw)
}
#if LANG_CXX11
void LoginRequest::set_passw(::std::string&& value) {
  
  passw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.passw)
}
#endif
void LoginRequest::set_passw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.passw)
}
void LoginRequest::set_passw(const char* value, size_t size) {
  
  passw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.passw)
}
::std::string* LoginRequest::mutable_passw() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.passw)
  return passw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_passw() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.passw)
  
  return passw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_passw(::std::string* passw) {
  if (passw != NULL) {
    
  } else {
    
  }
  passw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passw);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.passw)
}

// string email = 5;
void LoginRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::email() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.email)
  return email_.GetNoArena();
}
void LoginRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.email)
}
#if LANG_CXX11
void LoginRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.email)
}
#endif
void LoginRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.email)
}
void LoginRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.email)
}
::std::string* LoginRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_email() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.email)
}

// string token = 6;
void LoginRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::token() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.token)
  return token_.GetNoArena();
}
void LoginRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.token)
}
#if LANG_CXX11
void LoginRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.token)
}
#endif
void LoginRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.token)
}
void LoginRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.token)
}
::std::string* LoginRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_token() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.token)
}

// string appID = 7;
void LoginRequest::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::appid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.appID)
  return appid_.GetNoArena();
}
void LoginRequest::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.appID)
}
#if LANG_CXX11
void LoginRequest::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.appID)
}
#endif
void LoginRequest::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.appID)
}
void LoginRequest::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.appID)
}
::std::string* LoginRequest::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_appid() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.appID)
}

// string appPublicKey = 8;
void LoginRequest::clear_apppublickey() {
  apppublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::apppublickey() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.appPublicKey)
  return apppublickey_.GetNoArena();
}
void LoginRequest::set_apppublickey(const ::std::string& value) {
  
  apppublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.appPublicKey)
}
#if LANG_CXX11
void LoginRequest::set_apppublickey(::std::string&& value) {
  
  apppublickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.appPublicKey)
}
#endif
void LoginRequest::set_apppublickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apppublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.appPublicKey)
}
void LoginRequest::set_apppublickey(const char* value, size_t size) {
  
  apppublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.appPublicKey)
}
::std::string* LoginRequest::mutable_apppublickey() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.appPublicKey)
  return apppublickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_apppublickey() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.appPublicKey)
  
  return apppublickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_apppublickey(::std::string* apppublickey) {
  if (apppublickey != NULL) {
    
  } else {
    
  }
  apppublickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apppublickey);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.appPublicKey)
}

// string signedToken = 9;
void LoginRequest::clear_signedtoken() {
  signedtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::signedtoken() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.signedToken)
  return signedtoken_.GetNoArena();
}
void LoginRequest::set_signedtoken(const ::std::string& value) {
  
  signedtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.signedToken)
}
#if LANG_CXX11
void LoginRequest::set_signedtoken(::std::string&& value) {
  
  signedtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.signedToken)
}
#endif
void LoginRequest::set_signedtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signedtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.signedToken)
}
void LoginRequest::set_signedtoken(const char* value, size_t size) {
  
  signedtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.signedToken)
}
::std::string* LoginRequest::mutable_signedtoken() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.signedToken)
  return signedtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_signedtoken() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.signedToken)
  
  return signedtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_signedtoken(::std::string* signedtoken) {
  if (signedtoken != NULL) {
    
  } else {
    
  }
  signedtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signedtoken);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.signedToken)
}

// string data = 20;
void LoginRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::data() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.data)
  return data_.GetNoArena();
}
void LoginRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.data)
}
#if LANG_CXX11
void LoginRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.data)
}
#endif
void LoginRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.data)
}
void LoginRequest::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.data)
}
::std::string* LoginRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_data() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.data)
}

// string otherData = 21;
void LoginRequest::clear_otherdata() {
  otherdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::otherdata() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginRequest.otherData)
  return otherdata_.GetNoArena();
}
void LoginRequest::set_otherdata(const ::std::string& value) {
  
  otherdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginRequest.otherData)
}
#if LANG_CXX11
void LoginRequest::set_otherdata(::std::string&& value) {
  
  otherdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginRequest.otherData)
}
#endif
void LoginRequest::set_otherdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  otherdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginRequest.otherData)
}
void LoginRequest::set_otherdata(const char* value, size_t size) {
  
  otherdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginRequest.otherData)
}
::std::string* LoginRequest::mutable_otherdata() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginRequest.otherData)
  return otherdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_otherdata() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginRequest.otherData)
  
  return otherdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_otherdata(::std::string* otherdata) {
  if (otherdata != NULL) {
    
  } else {
    
  }
  otherdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otherdata);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginRequest.otherData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReply::kErrorCodeFieldNumber;
const int LoginReply::kDetailFieldNumber;
const int LoginReply::kSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReply::LoginReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.LoginReply)
}
LoginReply::LoginReply(const LoginReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail().size() > 0) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sessionkey().size() > 0) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.LoginReply)
}

void LoginReply::SharedCtor() {
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
  _cached_size_ = 0;
}

LoginReply::~LoginReply() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.LoginReply)
  SharedDtor();
}

void LoginReply::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReply::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginReply& LoginReply::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginReply* LoginReply::New(::google::protobuf::Arena* arena) const {
  LoginReply* n = new LoginReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.LoginReply)
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
}

bool LoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.LoginReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .realtime.messageservice.LoginReply.LoginCode errorCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errorcode(static_cast< ::realtime::messageservice::LoginReply_LoginCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginReply.detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sessionKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.LoginReply.sessionKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.LoginReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.LoginReply)
  return false;
#undef DO_
}

void LoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.LoginReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .realtime.messageservice.LoginReply.LoginCode errorCode = 1;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginReply.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->detail(), output);
  }

  // string sessionKey = 3;
  if (this->sessionkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginReply.sessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sessionkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.LoginReply)
}

::google::protobuf::uint8* LoginReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.LoginReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .realtime.messageservice.LoginReply.LoginCode errorCode = 1;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginReply.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->detail(), target);
  }

  // string sessionKey = 3;
  if (this->sessionkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.LoginReply.sessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.LoginReply)
  return target;
}

size_t LoginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.LoginReply)
  size_t total_size = 0;

  // string detail = 2;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  // string sessionKey = 3;
  if (this->sessionkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionkey());
  }

  // .realtime.messageservice.LoginReply.LoginCode errorCode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.LoginReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.LoginReply)
    MergeFrom(*source);
  }
}

void LoginReply::MergeFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.sessionkey().size() > 0) {

    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void LoginReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReply::CopyFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReply::IsInitialized() const {
  return true;
}

void LoginReply::Swap(LoginReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReply::InternalSwap(LoginReply* other) {
  detail_.Swap(&other->detail_);
  sessionkey_.Swap(&other->sessionkey_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReply::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReply

// .realtime.messageservice.LoginReply.LoginCode errorCode = 1;
void LoginReply::clear_errorcode() {
  errorcode_ = 0;
}
::realtime::messageservice::LoginReply_LoginCode LoginReply::errorcode() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginReply.errorCode)
  return static_cast< ::realtime::messageservice::LoginReply_LoginCode >(errorcode_);
}
void LoginReply::set_errorcode(::realtime::messageservice::LoginReply_LoginCode value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginReply.errorCode)
}

// string detail = 2;
void LoginReply::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginReply::detail() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginReply.detail)
  return detail_.GetNoArena();
}
void LoginReply::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginReply.detail)
}
#if LANG_CXX11
void LoginReply::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginReply.detail)
}
#endif
void LoginReply::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginReply.detail)
}
void LoginReply::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginReply.detail)
}
::std::string* LoginReply::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginReply.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReply::release_detail() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginReply.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReply::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginReply.detail)
}

// string sessionKey = 3;
void LoginReply::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginReply::sessionkey() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.LoginReply.sessionKey)
  return sessionkey_.GetNoArena();
}
void LoginReply::set_sessionkey(const ::std::string& value) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.LoginReply.sessionKey)
}
#if LANG_CXX11
void LoginReply::set_sessionkey(::std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.LoginReply.sessionKey)
}
#endif
void LoginReply::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.LoginReply.sessionKey)
}
void LoginReply::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.LoginReply.sessionKey)
}
::std::string* LoginReply::mutable_sessionkey() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.LoginReply.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReply::release_sessionkey() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.LoginReply.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReply::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.LoginReply.sessionKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateMessage::kSessionKeyFieldNumber;
const int AuthenticateMessage::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateMessage::AuthenticateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.AuthenticateMessage)
}
AuthenticateMessage::AuthenticateMessage(const AuthenticateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sessionkey().size() > 0) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.AuthenticateMessage)
}

void AuthenticateMessage::SharedCtor() {
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AuthenticateMessage::~AuthenticateMessage() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.AuthenticateMessage)
  SharedDtor();
}

void AuthenticateMessage::SharedDtor() {
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateMessage::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateMessage& AuthenticateMessage::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateMessage* AuthenticateMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateMessage* n = new AuthenticateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.AuthenticateMessage)
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_ULONGLONG(0);
}

bool AuthenticateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.AuthenticateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.AuthenticateMessage.sessionKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 userID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.AuthenticateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.AuthenticateMessage)
  return false;
#undef DO_
}

void AuthenticateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.AuthenticateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionKey = 1;
  if (this->sessionkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.AuthenticateMessage.sessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionkey(), output);
  }

  // uint64 userID = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.AuthenticateMessage)
}

::google::protobuf::uint8* AuthenticateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.AuthenticateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionKey = 1;
  if (this->sessionkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.AuthenticateMessage.sessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionkey(), target);
  }

  // uint64 userID = 2;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.AuthenticateMessage)
  return target;
}

size_t AuthenticateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.AuthenticateMessage)
  size_t total_size = 0;

  // string sessionKey = 1;
  if (this->sessionkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionkey());
  }

  // uint64 userID = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.AuthenticateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.AuthenticateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.AuthenticateMessage)
    MergeFrom(*source);
  }
}

void AuthenticateMessage::MergeFrom(const AuthenticateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.AuthenticateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionkey().size() > 0) {

    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void AuthenticateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.AuthenticateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateMessage::CopyFrom(const AuthenticateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.AuthenticateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateMessage::IsInitialized() const {
  return true;
}

void AuthenticateMessage::Swap(AuthenticateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateMessage::InternalSwap(AuthenticateMessage* other) {
  sessionkey_.Swap(&other->sessionkey_);
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateMessage::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateMessage

// string sessionKey = 1;
void AuthenticateMessage::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateMessage::sessionkey() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.AuthenticateMessage.sessionKey)
  return sessionkey_.GetNoArena();
}
void AuthenticateMessage::set_sessionkey(const ::std::string& value) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.AuthenticateMessage.sessionKey)
}
#if LANG_CXX11
void AuthenticateMessage::set_sessionkey(::std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.AuthenticateMessage.sessionKey)
}
#endif
void AuthenticateMessage::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.AuthenticateMessage.sessionKey)
}
void AuthenticateMessage::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.AuthenticateMessage.sessionKey)
}
::std::string* AuthenticateMessage::mutable_sessionkey() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.AuthenticateMessage.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateMessage::release_sessionkey() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.AuthenticateMessage.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateMessage::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.AuthenticateMessage.sessionKey)
}

// uint64 userID = 2;
void AuthenticateMessage::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AuthenticateMessage::userid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.AuthenticateMessage.userID)
  return userid_;
}
void AuthenticateMessage::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.AuthenticateMessage.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateReply::kAuthenticatedFieldNumber;
const int AuthenticateReply::kSessionKeyFieldNumber;
const int AuthenticateReply::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateReply::AuthenticateReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.AuthenticateReply)
}
AuthenticateReply::AuthenticateReply(const AuthenticateReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sessionkey().size() > 0) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&authenticated_) -
    reinterpret_cast<char*>(&userid_) + sizeof(authenticated_));
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.AuthenticateReply)
}

void AuthenticateReply::SharedCtor() {
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&authenticated_) -
    reinterpret_cast<char*>(&userid_) + sizeof(authenticated_));
  _cached_size_ = 0;
}

AuthenticateReply::~AuthenticateReply() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.AuthenticateReply)
  SharedDtor();
}

void AuthenticateReply::SharedDtor() {
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateReply::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateReply& AuthenticateReply::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateReply* AuthenticateReply::New(::google::protobuf::Arena* arena) const {
  AuthenticateReply* n = new AuthenticateReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.AuthenticateReply)
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, reinterpret_cast<char*>(&authenticated_) -
    reinterpret_cast<char*>(&userid_) + sizeof(authenticated_));
}

bool AuthenticateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.AuthenticateReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool authenticated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sessionKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.AuthenticateReply.sessionKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 userID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.AuthenticateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.AuthenticateReply)
  return false;
#undef DO_
}

void AuthenticateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.AuthenticateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool authenticated = 1;
  if (this->authenticated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->authenticated(), output);
  }

  // string sessionKey = 2;
  if (this->sessionkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.AuthenticateReply.sessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sessionkey(), output);
  }

  // uint64 userID = 3;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.AuthenticateReply)
}

::google::protobuf::uint8* AuthenticateReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.AuthenticateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool authenticated = 1;
  if (this->authenticated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->authenticated(), target);
  }

  // string sessionKey = 2;
  if (this->sessionkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.AuthenticateReply.sessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sessionkey(), target);
  }

  // uint64 userID = 3;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.AuthenticateReply)
  return target;
}

size_t AuthenticateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.AuthenticateReply)
  size_t total_size = 0;

  // string sessionKey = 2;
  if (this->sessionkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionkey());
  }

  // uint64 userID = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // bool authenticated = 1;
  if (this->authenticated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.AuthenticateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.AuthenticateReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.AuthenticateReply)
    MergeFrom(*source);
  }
}

void AuthenticateReply::MergeFrom(const AuthenticateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.AuthenticateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionkey().size() > 0) {

    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.authenticated() != 0) {
    set_authenticated(from.authenticated());
  }
}

void AuthenticateReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.AuthenticateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateReply::CopyFrom(const AuthenticateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.AuthenticateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateReply::IsInitialized() const {
  return true;
}

void AuthenticateReply::Swap(AuthenticateReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateReply::InternalSwap(AuthenticateReply* other) {
  sessionkey_.Swap(&other->sessionkey_);
  std::swap(userid_, other->userid_);
  std::swap(authenticated_, other->authenticated_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateReply::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateReply

// bool authenticated = 1;
void AuthenticateReply::clear_authenticated() {
  authenticated_ = false;
}
bool AuthenticateReply::authenticated() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.AuthenticateReply.authenticated)
  return authenticated_;
}
void AuthenticateReply::set_authenticated(bool value) {
  
  authenticated_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.AuthenticateReply.authenticated)
}

// string sessionKey = 2;
void AuthenticateReply::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateReply::sessionkey() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.AuthenticateReply.sessionKey)
  return sessionkey_.GetNoArena();
}
void AuthenticateReply::set_sessionkey(const ::std::string& value) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.AuthenticateReply.sessionKey)
}
#if LANG_CXX11
void AuthenticateReply::set_sessionkey(::std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.AuthenticateReply.sessionKey)
}
#endif
void AuthenticateReply::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.AuthenticateReply.sessionKey)
}
void AuthenticateReply::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.AuthenticateReply.sessionKey)
}
::std::string* AuthenticateReply::mutable_sessionkey() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.AuthenticateReply.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateReply::release_sessionkey() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.AuthenticateReply.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateReply::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.AuthenticateReply.sessionKey)
}

// uint64 userID = 3;
void AuthenticateReply::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AuthenticateReply::userid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.AuthenticateReply.userID)
  return userid_;
}
void AuthenticateReply::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.AuthenticateReply.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseMessage::kChannelIDFieldNumber;
const int BaseMessage::kUserIDFieldNumber;
const int BaseMessage::kTopicFieldNumber;
const int BaseMessage::kFromUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseMessage::BaseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.BaseMessage)
}
BaseMessage::BaseMessage(const BaseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromuid_ = from.fromuid_;
  clear_has_Target();
  switch (from.Target_case()) {
    case kChannelID: {
      set_channelid(from.channelid());
      break;
    }
    case kUserID: {
      set_userid(from.userid());
      break;
    }
    case kTopic: {
      set_topic(from.topic());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.BaseMessage)
}

void BaseMessage::SharedCtor() {
  fromuid_ = GOOGLE_ULONGLONG(0);
  clear_has_Target();
  _cached_size_ = 0;
}

BaseMessage::~BaseMessage() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.BaseMessage)
  SharedDtor();
}

void BaseMessage::SharedDtor() {
  if (has_Target()) {
    clear_Target();
  }
}

void BaseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseMessage::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseMessage& BaseMessage::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseMessage* BaseMessage::New(::google::protobuf::Arena* arena) const {
  BaseMessage* n = new BaseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseMessage::clear_Target() {
// @@protoc_insertion_point(one_of_clear_start:realtime.messageservice.BaseMessage)
  switch (Target_case()) {
    case kChannelID: {
      // No need to clear
      break;
    }
    case kUserID: {
      // No need to clear
      break;
    }
    case kTopic: {
      Target_.topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void BaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.BaseMessage)
  fromuid_ = GOOGLE_ULONGLONG(0);
  clear_Target();
}

bool BaseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.BaseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 channelID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_Target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &Target_.channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 userID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_Target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &Target_.userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.BaseMessage.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fromUID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.BaseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.BaseMessage)
  return false;
#undef DO_
}

void BaseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.BaseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channelID = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channelid(), output);
  }

  // uint64 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  // string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.BaseMessage.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  // uint64 fromUID = 8;
  if (this->fromuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fromuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.BaseMessage)
}

::google::protobuf::uint8* BaseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.BaseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channelID = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channelid(), target);
  }

  // uint64 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  // string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.BaseMessage.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  // uint64 fromUID = 8;
  if (this->fromuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fromuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.BaseMessage)
  return target;
}

size_t BaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.BaseMessage)
  size_t total_size = 0;

  // uint64 fromUID = 8;
  if (this->fromuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fromuid());
  }

  switch (Target_case()) {
    // uint64 channelID = 1;
    case kChannelID: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelid());
      break;
    }
    // uint64 userID = 2;
    case kUserID: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
      break;
    }
    // string topic = 3;
    case kTopic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.BaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.BaseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.BaseMessage)
    MergeFrom(*source);
  }
}

void BaseMessage::MergeFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.BaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromuid() != 0) {
    set_fromuid(from.fromuid());
  }
  switch (from.Target_case()) {
    case kChannelID: {
      set_channelid(from.channelid());
      break;
    }
    case kUserID: {
      set_userid(from.userid());
      break;
    }
    case kTopic: {
      set_topic(from.topic());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void BaseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMessage::CopyFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMessage::IsInitialized() const {
  return true;
}

void BaseMessage::Swap(BaseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseMessage::InternalSwap(BaseMessage* other) {
  std::swap(fromuid_, other->fromuid_);
  std::swap(Target_, other->Target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseMessage::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseMessage

// uint64 channelID = 1;
bool BaseMessage::has_channelid() const {
  return Target_case() == kChannelID;
}
void BaseMessage::set_has_channelid() {
  _oneof_case_[0] = kChannelID;
}
void BaseMessage::clear_channelid() {
  if (has_channelid()) {
    Target_.channelid_ = GOOGLE_ULONGLONG(0);
    clear_has_Target();
  }
}
::google::protobuf::uint64 BaseMessage::channelid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.BaseMessage.channelID)
  if (has_channelid()) {
    return Target_.channelid_;
  }
  return GOOGLE_ULONGLONG(0);
}
void BaseMessage::set_channelid(::google::protobuf::uint64 value) {
  if (!has_channelid()) {
    clear_Target();
    set_has_channelid();
  }
  Target_.channelid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.BaseMessage.channelID)
}

// uint64 userID = 2;
bool BaseMessage::has_userid() const {
  return Target_case() == kUserID;
}
void BaseMessage::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
void BaseMessage::clear_userid() {
  if (has_userid()) {
    Target_.userid_ = GOOGLE_ULONGLONG(0);
    clear_has_Target();
  }
}
::google::protobuf::uint64 BaseMessage::userid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.BaseMessage.userID)
  if (has_userid()) {
    return Target_.userid_;
  }
  return GOOGLE_ULONGLONG(0);
}
void BaseMessage::set_userid(::google::protobuf::uint64 value) {
  if (!has_userid()) {
    clear_Target();
    set_has_userid();
  }
  Target_.userid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.BaseMessage.userID)
}

// string topic = 3;
bool BaseMessage::has_topic() const {
  return Target_case() == kTopic;
}
void BaseMessage::set_has_topic() {
  _oneof_case_[0] = kTopic;
}
void BaseMessage::clear_topic() {
  if (has_topic()) {
    Target_.topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Target();
  }
}
const ::std::string& BaseMessage::topic() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.BaseMessage.topic)
  if (has_topic()) {
    return Target_.topic_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void BaseMessage::set_topic(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:realtime.messageservice.BaseMessage.topic)
  if (!has_topic()) {
    clear_Target();
    set_has_topic();
    Target_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Target_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.BaseMessage.topic)
}
#if LANG_CXX11
void BaseMessage::set_topic(::std::string&& value) {
  // @@protoc_insertion_point(field_set:realtime.messageservice.BaseMessage.topic)
  if (!has_topic()) {
    clear_Target();
    set_has_topic();
    Target_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Target_.topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.BaseMessage.topic)
}
#endif
void BaseMessage::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_topic()) {
    clear_Target();
    set_has_topic();
    Target_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Target_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.BaseMessage.topic)
}
void BaseMessage::set_topic(const char* value, size_t size) {
  if (!has_topic()) {
    clear_Target();
    set_has_topic();
    Target_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Target_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.BaseMessage.topic)
}
::std::string* BaseMessage::mutable_topic() {
  if (!has_topic()) {
    clear_Target();
    set_has_topic();
    Target_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.BaseMessage.topic)
  return Target_.topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseMessage::release_topic() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.BaseMessage.topic)
  if (has_topic()) {
    clear_has_Target();
    return Target_.topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void BaseMessage::set_allocated_topic(::std::string* topic) {
  if (!has_topic()) {
    Target_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Target();
  if (topic != NULL) {
    set_has_topic();
    Target_.topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        topic);
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.BaseMessage.topic)
}

// uint64 fromUID = 8;
void BaseMessage::clear_fromuid() {
  fromuid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BaseMessage::fromuid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.BaseMessage.fromUID)
  return fromuid_;
}
void BaseMessage::set_fromuid(::google::protobuf::uint64 value) {
  
  fromuid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.BaseMessage.fromUID)
}

bool BaseMessage::has_Target() const {
  return Target_case() != TARGET_NOT_SET;
}
void BaseMessage::clear_has_Target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
BaseMessage::TargetCase BaseMessage::Target_case() const {
  return BaseMessage::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage::TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.TextMessage)
}
TextMessage::TextMessage(const TextMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.TextMessage)
}

void TextMessage::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TextMessage::~TextMessage() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.TextMessage)
  SharedDtor();
}

void TextMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMessage::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMessage& TextMessage::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextMessage* TextMessage::New(::google::protobuf::Arena* arena) const {
  TextMessage* n = new TextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.TextMessage)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.TextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.TextMessage.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.TextMessage)
  return false;
#undef DO_
}

void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.TextMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.TextMessage)
}

::google::protobuf::uint8* TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.TextMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.TextMessage)
  return target;
}

size_t TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.TextMessage)
  size_t total_size = 0;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.TextMessage)
    MergeFrom(*source);
  }
}

void TextMessage::MergeFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage::CopyFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage::IsInitialized() const {
  return true;
}

void TextMessage::Swap(TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage::InternalSwap(TextMessage* other) {
  text_.Swap(&other->text_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextMessage::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextMessage

// string text = 2;
void TextMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TextMessage::text() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.TextMessage.text)
  return text_.GetNoArena();
}
void TextMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.TextMessage.text)
}
#if LANG_CXX11
void TextMessage::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.TextMessage.text)
}
#endif
void TextMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.TextMessage.text)
}
void TextMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.TextMessage.text)
}
::std::string* TextMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.TextMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextMessage::release_text() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.TextMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.TextMessage.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoMessage::kPhotoFormatFieldNumber;
const int PhotoMessage::kPhotoDataFieldNumber;
const int PhotoMessage::kDescriptionFieldNumber;
const int PhotoMessage::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoMessage::PhotoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.PhotoMessage)
}
PhotoMessage::PhotoMessage(const PhotoMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  photoformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.photoformat().size() > 0) {
    photoformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photoformat_);
  }
  photodata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.photodata().size() > 0) {
    photodata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photodata_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.PhotoMessage)
}

void PhotoMessage::SharedCtor() {
  photoformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photodata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PhotoMessage::~PhotoMessage() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.PhotoMessage)
  SharedDtor();
}

void PhotoMessage::SharedDtor() {
  photoformat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photodata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhotoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoMessage::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhotoMessage& PhotoMessage::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhotoMessage* PhotoMessage::New(::google::protobuf::Arena* arena) const {
  PhotoMessage* n = new PhotoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.PhotoMessage)
  photoformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PhotoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.PhotoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string photoFormat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photoformat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photoformat().data(), this->photoformat().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.PhotoMessage.photoFormat"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string photoData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photodata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photodata().data(), this->photodata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.PhotoMessage.photoData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.PhotoMessage.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metaData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.PhotoMessage.metaData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.PhotoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.PhotoMessage)
  return false;
#undef DO_
}

void PhotoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.PhotoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string photoFormat = 2;
  if (this->photoformat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photoformat().data(), this->photoformat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.photoFormat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->photoformat(), output);
  }

  // string photoData = 3;
  if (this->photodata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photodata().data(), this->photodata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.photoData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->photodata(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // string metaData = 5;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.metaData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->metadata(), output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.PhotoMessage)
}

::google::protobuf::uint8* PhotoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.PhotoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string photoFormat = 2;
  if (this->photoformat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photoformat().data(), this->photoformat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.photoFormat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->photoformat(), target);
  }

  // string photoData = 3;
  if (this->photodata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photodata().data(), this->photodata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.photoData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->photodata(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // string metaData = 5;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.PhotoMessage.metaData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->metadata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.PhotoMessage)
  return target;
}

size_t PhotoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.PhotoMessage)
  size_t total_size = 0;

  // string photoFormat = 2;
  if (this->photoformat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photoformat());
  }

  // string photoData = 3;
  if (this->photodata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photodata());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string metaData = 5;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.PhotoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.PhotoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.PhotoMessage)
    MergeFrom(*source);
  }
}

void PhotoMessage::MergeFrom(const PhotoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.PhotoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.photoformat().size() > 0) {

    photoformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photoformat_);
  }
  if (from.photodata().size() > 0) {

    photodata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photodata_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
}

void PhotoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.PhotoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoMessage::CopyFrom(const PhotoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.PhotoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoMessage::IsInitialized() const {
  return true;
}

void PhotoMessage::Swap(PhotoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoMessage::InternalSwap(PhotoMessage* other) {
  photoformat_.Swap(&other->photoformat_);
  photodata_.Swap(&other->photodata_);
  description_.Swap(&other->description_);
  metadata_.Swap(&other->metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoMessage::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoMessage

// string photoFormat = 2;
void PhotoMessage::clear_photoformat() {
  photoformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhotoMessage::photoformat() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.PhotoMessage.photoFormat)
  return photoformat_.GetNoArena();
}
void PhotoMessage::set_photoformat(const ::std::string& value) {
  
  photoformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.PhotoMessage.photoFormat)
}
#if LANG_CXX11
void PhotoMessage::set_photoformat(::std::string&& value) {
  
  photoformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.PhotoMessage.photoFormat)
}
#endif
void PhotoMessage::set_photoformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photoformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.PhotoMessage.photoFormat)
}
void PhotoMessage::set_photoformat(const char* value, size_t size) {
  
  photoformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.PhotoMessage.photoFormat)
}
::std::string* PhotoMessage::mutable_photoformat() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.PhotoMessage.photoFormat)
  return photoformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMessage::release_photoformat() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.PhotoMessage.photoFormat)
  
  return photoformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMessage::set_allocated_photoformat(::std::string* photoformat) {
  if (photoformat != NULL) {
    
  } else {
    
  }
  photoformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photoformat);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.PhotoMessage.photoFormat)
}

// string photoData = 3;
void PhotoMessage::clear_photodata() {
  photodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhotoMessage::photodata() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.PhotoMessage.photoData)
  return photodata_.GetNoArena();
}
void PhotoMessage::set_photodata(const ::std::string& value) {
  
  photodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.PhotoMessage.photoData)
}
#if LANG_CXX11
void PhotoMessage::set_photodata(::std::string&& value) {
  
  photodata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.PhotoMessage.photoData)
}
#endif
void PhotoMessage::set_photodata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.PhotoMessage.photoData)
}
void PhotoMessage::set_photodata(const char* value, size_t size) {
  
  photodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.PhotoMessage.photoData)
}
::std::string* PhotoMessage::mutable_photodata() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.PhotoMessage.photoData)
  return photodata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMessage::release_photodata() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.PhotoMessage.photoData)
  
  return photodata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMessage::set_allocated_photodata(::std::string* photodata) {
  if (photodata != NULL) {
    
  } else {
    
  }
  photodata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photodata);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.PhotoMessage.photoData)
}

// string description = 4;
void PhotoMessage::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhotoMessage::description() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.PhotoMessage.description)
  return description_.GetNoArena();
}
void PhotoMessage::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.PhotoMessage.description)
}
#if LANG_CXX11
void PhotoMessage::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.PhotoMessage.description)
}
#endif
void PhotoMessage::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.PhotoMessage.description)
}
void PhotoMessage::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.PhotoMessage.description)
}
::std::string* PhotoMessage::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.PhotoMessage.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMessage::release_description() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.PhotoMessage.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMessage::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.PhotoMessage.description)
}

// string metaData = 5;
void PhotoMessage::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhotoMessage::metadata() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.PhotoMessage.metaData)
  return metadata_.GetNoArena();
}
void PhotoMessage::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.PhotoMessage.metaData)
}
#if LANG_CXX11
void PhotoMessage::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.PhotoMessage.metaData)
}
#endif
void PhotoMessage::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.PhotoMessage.metaData)
}
void PhotoMessage::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.PhotoMessage.metaData)
}
::std::string* PhotoMessage::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.PhotoMessage.metaData)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.PhotoMessage.metaData)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMessage::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.PhotoMessage.metaData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2SMessage::kTypeFieldNumber;
const int C2SMessage::kBaseFieldNumber;
const int C2SMessage::kNonceIDFieldNumber;
const int C2SMessage::kAuthMessageFieldNumber;
const int C2SMessage::kTxtFieldNumber;
const int C2SMessage::kPhotoMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2SMessage::C2SMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.C2SMessage)
}
C2SMessage::C2SMessage(const C2SMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::realtime::messageservice::BaseMessage(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&nonceid_, &from.nonceid_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&nonceid_) + sizeof(type_));
  clear_has_messages();
  switch (from.messages_case()) {
    case kAuthMessage: {
      mutable_authmessage()->::realtime::messageservice::AuthenticateMessage::MergeFrom(from.authmessage());
      break;
    }
    case kTxt: {
      mutable_txt()->::realtime::messageservice::TextMessage::MergeFrom(from.txt());
      break;
    }
    case kPhotoMsg: {
      mutable_photomsg()->::realtime::messageservice::PhotoMessage::MergeFrom(from.photomsg());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.C2SMessage)
}

void C2SMessage::SharedCtor() {
  ::memset(&base_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&base_) + sizeof(type_));
  clear_has_messages();
  _cached_size_ = 0;
}

C2SMessage::~C2SMessage() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.C2SMessage)
  SharedDtor();
}

void C2SMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (has_messages()) {
    clear_messages();
  }
}

void C2SMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SMessage::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2SMessage& C2SMessage::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2SMessage* C2SMessage::New(::google::protobuf::Arena* arena) const {
  C2SMessage* n = new C2SMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2SMessage::clear_messages() {
// @@protoc_insertion_point(one_of_clear_start:realtime.messageservice.C2SMessage)
  switch (messages_case()) {
    case kAuthMessage: {
      delete messages_.authmessage_;
      break;
    }
    case kTxt: {
      delete messages_.txt_;
      break;
    }
    case kPhotoMsg: {
      delete messages_.photomsg_;
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGES_NOT_SET;
}


void C2SMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.C2SMessage)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  ::memset(&nonceid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&nonceid_) + sizeof(type_));
  clear_messages();
}

bool C2SMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.C2SMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .realtime.messageservice.C2SMessage.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::realtime::messageservice::C2SMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.BaseMessage base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nonceID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.AuthenticateMessage authMessage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.TextMessage txt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.PhotoMessage photoMsg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photomsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.C2SMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.C2SMessage)
  return false;
#undef DO_
}

void C2SMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.C2SMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .realtime.messageservice.C2SMessage.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .realtime.messageservice.BaseMessage base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // int64 nonceID = 3;
  if (this->nonceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nonceid(), output);
  }

  // .realtime.messageservice.AuthenticateMessage authMessage = 4;
  if (has_authmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *messages_.authmessage_, output);
  }

  // .realtime.messageservice.TextMessage txt = 5;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *messages_.txt_, output);
  }

  // .realtime.messageservice.PhotoMessage photoMsg = 6;
  if (has_photomsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *messages_.photomsg_, output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.C2SMessage)
}

::google::protobuf::uint8* C2SMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.C2SMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .realtime.messageservice.C2SMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .realtime.messageservice.BaseMessage base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, deterministic, target);
  }

  // int64 nonceID = 3;
  if (this->nonceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nonceid(), target);
  }

  // .realtime.messageservice.AuthenticateMessage authMessage = 4;
  if (has_authmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *messages_.authmessage_, deterministic, target);
  }

  // .realtime.messageservice.TextMessage txt = 5;
  if (has_txt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *messages_.txt_, deterministic, target);
  }

  // .realtime.messageservice.PhotoMessage photoMsg = 6;
  if (has_photomsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *messages_.photomsg_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.C2SMessage)
  return target;
}

size_t C2SMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.C2SMessage)
  size_t total_size = 0;

  // .realtime.messageservice.BaseMessage base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // int64 nonceID = 3;
  if (this->nonceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nonceid());
  }

  // .realtime.messageservice.C2SMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (messages_case()) {
    // .realtime.messageservice.AuthenticateMessage authMessage = 4;
    case kAuthMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.authmessage_);
      break;
    }
    // .realtime.messageservice.TextMessage txt = 5;
    case kTxt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.txt_);
      break;
    }
    // .realtime.messageservice.PhotoMessage photoMsg = 6;
    case kPhotoMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.photomsg_);
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.C2SMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const C2SMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2SMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.C2SMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.C2SMessage)
    MergeFrom(*source);
  }
}

void C2SMessage::MergeFrom(const C2SMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.C2SMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::realtime::messageservice::BaseMessage::MergeFrom(from.base());
  }
  if (from.nonceid() != 0) {
    set_nonceid(from.nonceid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.messages_case()) {
    case kAuthMessage: {
      mutable_authmessage()->::realtime::messageservice::AuthenticateMessage::MergeFrom(from.authmessage());
      break;
    }
    case kTxt: {
      mutable_txt()->::realtime::messageservice::TextMessage::MergeFrom(from.txt());
      break;
    }
    case kPhotoMsg: {
      mutable_photomsg()->::realtime::messageservice::PhotoMessage::MergeFrom(from.photomsg());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
}

void C2SMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.C2SMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SMessage::CopyFrom(const C2SMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.C2SMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SMessage::IsInitialized() const {
  return true;
}

void C2SMessage::Swap(C2SMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2SMessage::InternalSwap(C2SMessage* other) {
  std::swap(base_, other->base_);
  std::swap(nonceid_, other->nonceid_);
  std::swap(type_, other->type_);
  std::swap(messages_, other->messages_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2SMessage::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2SMessage

// .realtime.messageservice.C2SMessage.MessageType type = 1;
void C2SMessage::clear_type() {
  type_ = 0;
}
::realtime::messageservice::C2SMessage_MessageType C2SMessage::type() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.C2SMessage.type)
  return static_cast< ::realtime::messageservice::C2SMessage_MessageType >(type_);
}
void C2SMessage::set_type(::realtime::messageservice::C2SMessage_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.C2SMessage.type)
}

// .realtime.messageservice.BaseMessage base = 2;
bool C2SMessage::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
void C2SMessage::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::realtime::messageservice::BaseMessage& C2SMessage::base() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.C2SMessage.base)
  return base_ != NULL ? *base_
                         : *::realtime::messageservice::BaseMessage::internal_default_instance();
}
::realtime::messageservice::BaseMessage* C2SMessage::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::realtime::messageservice::BaseMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.C2SMessage.base)
  return base_;
}
::realtime::messageservice::BaseMessage* C2SMessage::release_base() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.C2SMessage.base)
  
  ::realtime::messageservice::BaseMessage* temp = base_;
  base_ = NULL;
  return temp;
}
void C2SMessage::set_allocated_base(::realtime::messageservice::BaseMessage* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.C2SMessage.base)
}

// int64 nonceID = 3;
void C2SMessage::clear_nonceid() {
  nonceid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 C2SMessage::nonceid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.C2SMessage.nonceID)
  return nonceid_;
}
void C2SMessage::set_nonceid(::google::protobuf::int64 value) {
  
  nonceid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.C2SMessage.nonceID)
}

// .realtime.messageservice.AuthenticateMessage authMessage = 4;
bool C2SMessage::has_authmessage() const {
  return messages_case() == kAuthMessage;
}
void C2SMessage::set_has_authmessage() {
  _oneof_case_[0] = kAuthMessage;
}
void C2SMessage::clear_authmessage() {
  if (has_authmessage()) {
    delete messages_.authmessage_;
    clear_has_messages();
  }
}
 const ::realtime::messageservice::AuthenticateMessage& C2SMessage::authmessage() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.C2SMessage.authMessage)
  return has_authmessage()
      ? *messages_.authmessage_
      : ::realtime::messageservice::AuthenticateMessage::default_instance();
}
::realtime::messageservice::AuthenticateMessage* C2SMessage::mutable_authmessage() {
  if (!has_authmessage()) {
    clear_messages();
    set_has_authmessage();
    messages_.authmessage_ = new ::realtime::messageservice::AuthenticateMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.C2SMessage.authMessage)
  return messages_.authmessage_;
}
::realtime::messageservice::AuthenticateMessage* C2SMessage::release_authmessage() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.C2SMessage.authMessage)
  if (has_authmessage()) {
    clear_has_messages();
    ::realtime::messageservice::AuthenticateMessage* temp = messages_.authmessage_;
    messages_.authmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void C2SMessage::set_allocated_authmessage(::realtime::messageservice::AuthenticateMessage* authmessage) {
  clear_messages();
  if (authmessage) {
    set_has_authmessage();
    messages_.authmessage_ = authmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.C2SMessage.authMessage)
}

// .realtime.messageservice.TextMessage txt = 5;
bool C2SMessage::has_txt() const {
  return messages_case() == kTxt;
}
void C2SMessage::set_has_txt() {
  _oneof_case_[0] = kTxt;
}
void C2SMessage::clear_txt() {
  if (has_txt()) {
    delete messages_.txt_;
    clear_has_messages();
  }
}
 const ::realtime::messageservice::TextMessage& C2SMessage::txt() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.C2SMessage.txt)
  return has_txt()
      ? *messages_.txt_
      : ::realtime::messageservice::TextMessage::default_instance();
}
::realtime::messageservice::TextMessage* C2SMessage::mutable_txt() {
  if (!has_txt()) {
    clear_messages();
    set_has_txt();
    messages_.txt_ = new ::realtime::messageservice::TextMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.C2SMessage.txt)
  return messages_.txt_;
}
::realtime::messageservice::TextMessage* C2SMessage::release_txt() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.C2SMessage.txt)
  if (has_txt()) {
    clear_has_messages();
    ::realtime::messageservice::TextMessage* temp = messages_.txt_;
    messages_.txt_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void C2SMessage::set_allocated_txt(::realtime::messageservice::TextMessage* txt) {
  clear_messages();
  if (txt) {
    set_has_txt();
    messages_.txt_ = txt;
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.C2SMessage.txt)
}

// .realtime.messageservice.PhotoMessage photoMsg = 6;
bool C2SMessage::has_photomsg() const {
  return messages_case() == kPhotoMsg;
}
void C2SMessage::set_has_photomsg() {
  _oneof_case_[0] = kPhotoMsg;
}
void C2SMessage::clear_photomsg() {
  if (has_photomsg()) {
    delete messages_.photomsg_;
    clear_has_messages();
  }
}
 const ::realtime::messageservice::PhotoMessage& C2SMessage::photomsg() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.C2SMessage.photoMsg)
  return has_photomsg()
      ? *messages_.photomsg_
      : ::realtime::messageservice::PhotoMessage::default_instance();
}
::realtime::messageservice::PhotoMessage* C2SMessage::mutable_photomsg() {
  if (!has_photomsg()) {
    clear_messages();
    set_has_photomsg();
    messages_.photomsg_ = new ::realtime::messageservice::PhotoMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.C2SMessage.photoMsg)
  return messages_.photomsg_;
}
::realtime::messageservice::PhotoMessage* C2SMessage::release_photomsg() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.C2SMessage.photoMsg)
  if (has_photomsg()) {
    clear_has_messages();
    ::realtime::messageservice::PhotoMessage* temp = messages_.photomsg_;
    messages_.photomsg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void C2SMessage::set_allocated_photomsg(::realtime::messageservice::PhotoMessage* photomsg) {
  clear_messages();
  if (photomsg) {
    set_has_photomsg();
    messages_.photomsg_ = photomsg;
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.C2SMessage.photoMsg)
}

bool C2SMessage::has_messages() const {
  return messages_case() != MESSAGES_NOT_SET;
}
void C2SMessage::clear_has_messages() {
  _oneof_case_[0] = MESSAGES_NOT_SET;
}
C2SMessage::MessagesCase C2SMessage::messages_case() const {
  return C2SMessage::MessagesCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2CMessage::kCommonMessageFieldNumber;
const int S2CMessage::kBaseFieldNumber;
const int S2CMessage::kMsgIDFieldNumber;
const int S2CMessage::kAuthReplyFieldNumber;
const int S2CMessage::kTxtFieldNumber;
const int S2CMessage::kPhotoMsgFieldNumber;
const int S2CMessage::kAnythingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2CMessage::S2CMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messageservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:realtime.messageservice.S2CMessage)
}
S2CMessage::S2CMessage(const S2CMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commonmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commonmessage().size() > 0) {
    commonmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commonmessage_);
  }
  if (from.has_base()) {
    base_ = new ::realtime::messageservice::BaseMessage(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_anything()) {
    anything_ = new ::google::protobuf::Any(*from.anything_);
  } else {
    anything_ = NULL;
  }
  msgid_ = from.msgid_;
  clear_has_Messages();
  switch (from.Messages_case()) {
    case kAuthReply: {
      mutable_authreply()->::realtime::messageservice::AuthenticateReply::MergeFrom(from.authreply());
      break;
    }
    case kTxt: {
      mutable_txt()->::realtime::messageservice::TextMessage::MergeFrom(from.txt());
      break;
    }
    case kPhotoMsg: {
      mutable_photomsg()->::realtime::messageservice::PhotoMessage::MergeFrom(from.photomsg());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:realtime.messageservice.S2CMessage)
}

void S2CMessage::SharedCtor() {
  commonmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&base_) + sizeof(msgid_));
  clear_has_Messages();
  _cached_size_ = 0;
}

S2CMessage::~S2CMessage() {
  // @@protoc_insertion_point(destructor:realtime.messageservice.S2CMessage)
  SharedDtor();
}

void S2CMessage::SharedDtor() {
  commonmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete anything_;
  }
  if (has_Messages()) {
    clear_Messages();
  }
}

void S2CMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CMessage::descriptor() {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2CMessage& S2CMessage::default_instance() {
  protobuf_messageservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2CMessage* S2CMessage::New(::google::protobuf::Arena* arena) const {
  S2CMessage* n = new S2CMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2CMessage::clear_Messages() {
// @@protoc_insertion_point(one_of_clear_start:realtime.messageservice.S2CMessage)
  switch (Messages_case()) {
    case kAuthReply: {
      delete Messages_.authreply_;
      break;
    }
    case kTxt: {
      delete Messages_.txt_;
      break;
    }
    case kPhotoMsg: {
      delete Messages_.photomsg_;
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGES_NOT_SET;
}


void S2CMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:realtime.messageservice.S2CMessage)
  commonmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && anything_ != NULL) {
    delete anything_;
  }
  anything_ = NULL;
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_Messages();
}

bool S2CMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:realtime.messageservice.S2CMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string commonMessage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commonmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commonmessage().data(), this->commonmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "realtime.messageservice.S2CMessage.commonMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.BaseMessage base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 msgID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.AuthenticateReply authReply = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.TextMessage txt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .realtime.messageservice.PhotoMessage photoMsg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photomsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any anything = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anything()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:realtime.messageservice.S2CMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:realtime.messageservice.S2CMessage)
  return false;
#undef DO_
}

void S2CMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:realtime.messageservice.S2CMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string commonMessage = 1;
  if (this->commonmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commonmessage().data(), this->commonmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.S2CMessage.commonMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->commonmessage(), output);
  }

  // .realtime.messageservice.BaseMessage base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // uint64 msgID = 3;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msgid(), output);
  }

  // .realtime.messageservice.AuthenticateReply authReply = 5;
  if (has_authreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *Messages_.authreply_, output);
  }

  // .realtime.messageservice.TextMessage txt = 6;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *Messages_.txt_, output);
  }

  // .realtime.messageservice.PhotoMessage photoMsg = 7;
  if (has_photomsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *Messages_.photomsg_, output);
  }

  // .google.protobuf.Any anything = 20;
  if (this->has_anything()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->anything_, output);
  }

  // @@protoc_insertion_point(serialize_end:realtime.messageservice.S2CMessage)
}

::google::protobuf::uint8* S2CMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:realtime.messageservice.S2CMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string commonMessage = 1;
  if (this->commonmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commonmessage().data(), this->commonmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "realtime.messageservice.S2CMessage.commonMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->commonmessage(), target);
  }

  // .realtime.messageservice.BaseMessage base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, deterministic, target);
  }

  // uint64 msgID = 3;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msgid(), target);
  }

  // .realtime.messageservice.AuthenticateReply authReply = 5;
  if (has_authreply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *Messages_.authreply_, deterministic, target);
  }

  // .realtime.messageservice.TextMessage txt = 6;
  if (has_txt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *Messages_.txt_, deterministic, target);
  }

  // .realtime.messageservice.PhotoMessage photoMsg = 7;
  if (has_photomsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *Messages_.photomsg_, deterministic, target);
  }

  // .google.protobuf.Any anything = 20;
  if (this->has_anything()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->anything_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:realtime.messageservice.S2CMessage)
  return target;
}

size_t S2CMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:realtime.messageservice.S2CMessage)
  size_t total_size = 0;

  // string commonMessage = 1;
  if (this->commonmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commonmessage());
  }

  // .realtime.messageservice.BaseMessage base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // .google.protobuf.Any anything = 20;
  if (this->has_anything()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->anything_);
  }

  // uint64 msgID = 3;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());
  }

  switch (Messages_case()) {
    // .realtime.messageservice.AuthenticateReply authReply = 5;
    case kAuthReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Messages_.authreply_);
      break;
    }
    // .realtime.messageservice.TextMessage txt = 6;
    case kTxt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Messages_.txt_);
      break;
    }
    // .realtime.messageservice.PhotoMessage photoMsg = 7;
    case kPhotoMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Messages_.photomsg_);
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:realtime.messageservice.S2CMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2CMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:realtime.messageservice.S2CMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:realtime.messageservice.S2CMessage)
    MergeFrom(*source);
  }
}

void S2CMessage::MergeFrom(const S2CMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:realtime.messageservice.S2CMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commonmessage().size() > 0) {

    commonmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commonmessage_);
  }
  if (from.has_base()) {
    mutable_base()->::realtime::messageservice::BaseMessage::MergeFrom(from.base());
  }
  if (from.has_anything()) {
    mutable_anything()->::google::protobuf::Any::MergeFrom(from.anything());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  switch (from.Messages_case()) {
    case kAuthReply: {
      mutable_authreply()->::realtime::messageservice::AuthenticateReply::MergeFrom(from.authreply());
      break;
    }
    case kTxt: {
      mutable_txt()->::realtime::messageservice::TextMessage::MergeFrom(from.txt());
      break;
    }
    case kPhotoMsg: {
      mutable_photomsg()->::realtime::messageservice::PhotoMessage::MergeFrom(from.photomsg());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
}

void S2CMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:realtime.messageservice.S2CMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CMessage::CopyFrom(const S2CMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:realtime.messageservice.S2CMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CMessage::IsInitialized() const {
  return true;
}

void S2CMessage::Swap(S2CMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2CMessage::InternalSwap(S2CMessage* other) {
  commonmessage_.Swap(&other->commonmessage_);
  std::swap(base_, other->base_);
  std::swap(anything_, other->anything_);
  std::swap(msgid_, other->msgid_);
  std::swap(Messages_, other->Messages_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2CMessage::GetMetadata() const {
  protobuf_messageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2CMessage

// string commonMessage = 1;
void S2CMessage::clear_commonmessage() {
  commonmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& S2CMessage::commonmessage() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.commonMessage)
  return commonmessage_.GetNoArena();
}
void S2CMessage::set_commonmessage(const ::std::string& value) {
  
  commonmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:realtime.messageservice.S2CMessage.commonMessage)
}
#if LANG_CXX11
void S2CMessage::set_commonmessage(::std::string&& value) {
  
  commonmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:realtime.messageservice.S2CMessage.commonMessage)
}
#endif
void S2CMessage::set_commonmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  commonmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:realtime.messageservice.S2CMessage.commonMessage)
}
void S2CMessage::set_commonmessage(const char* value, size_t size) {
  
  commonmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:realtime.messageservice.S2CMessage.commonMessage)
}
::std::string* S2CMessage::mutable_commonmessage() {
  
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.S2CMessage.commonMessage)
  return commonmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2CMessage::release_commonmessage() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.S2CMessage.commonMessage)
  
  return commonmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2CMessage::set_allocated_commonmessage(::std::string* commonmessage) {
  if (commonmessage != NULL) {
    
  } else {
    
  }
  commonmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commonmessage);
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.S2CMessage.commonMessage)
}

// .realtime.messageservice.BaseMessage base = 2;
bool S2CMessage::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
void S2CMessage::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::realtime::messageservice::BaseMessage& S2CMessage::base() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.base)
  return base_ != NULL ? *base_
                         : *::realtime::messageservice::BaseMessage::internal_default_instance();
}
::realtime::messageservice::BaseMessage* S2CMessage::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::realtime::messageservice::BaseMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.S2CMessage.base)
  return base_;
}
::realtime::messageservice::BaseMessage* S2CMessage::release_base() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.S2CMessage.base)
  
  ::realtime::messageservice::BaseMessage* temp = base_;
  base_ = NULL;
  return temp;
}
void S2CMessage::set_allocated_base(::realtime::messageservice::BaseMessage* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.S2CMessage.base)
}

// uint64 msgID = 3;
void S2CMessage::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 S2CMessage::msgid() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.msgID)
  return msgid_;
}
void S2CMessage::set_msgid(::google::protobuf::uint64 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:realtime.messageservice.S2CMessage.msgID)
}

// .realtime.messageservice.AuthenticateReply authReply = 5;
bool S2CMessage::has_authreply() const {
  return Messages_case() == kAuthReply;
}
void S2CMessage::set_has_authreply() {
  _oneof_case_[0] = kAuthReply;
}
void S2CMessage::clear_authreply() {
  if (has_authreply()) {
    delete Messages_.authreply_;
    clear_has_Messages();
  }
}
 const ::realtime::messageservice::AuthenticateReply& S2CMessage::authreply() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.authReply)
  return has_authreply()
      ? *Messages_.authreply_
      : ::realtime::messageservice::AuthenticateReply::default_instance();
}
::realtime::messageservice::AuthenticateReply* S2CMessage::mutable_authreply() {
  if (!has_authreply()) {
    clear_Messages();
    set_has_authreply();
    Messages_.authreply_ = new ::realtime::messageservice::AuthenticateReply;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.S2CMessage.authReply)
  return Messages_.authreply_;
}
::realtime::messageservice::AuthenticateReply* S2CMessage::release_authreply() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.S2CMessage.authReply)
  if (has_authreply()) {
    clear_has_Messages();
    ::realtime::messageservice::AuthenticateReply* temp = Messages_.authreply_;
    Messages_.authreply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void S2CMessage::set_allocated_authreply(::realtime::messageservice::AuthenticateReply* authreply) {
  clear_Messages();
  if (authreply) {
    set_has_authreply();
    Messages_.authreply_ = authreply;
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.S2CMessage.authReply)
}

// .realtime.messageservice.TextMessage txt = 6;
bool S2CMessage::has_txt() const {
  return Messages_case() == kTxt;
}
void S2CMessage::set_has_txt() {
  _oneof_case_[0] = kTxt;
}
void S2CMessage::clear_txt() {
  if (has_txt()) {
    delete Messages_.txt_;
    clear_has_Messages();
  }
}
 const ::realtime::messageservice::TextMessage& S2CMessage::txt() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.txt)
  return has_txt()
      ? *Messages_.txt_
      : ::realtime::messageservice::TextMessage::default_instance();
}
::realtime::messageservice::TextMessage* S2CMessage::mutable_txt() {
  if (!has_txt()) {
    clear_Messages();
    set_has_txt();
    Messages_.txt_ = new ::realtime::messageservice::TextMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.S2CMessage.txt)
  return Messages_.txt_;
}
::realtime::messageservice::TextMessage* S2CMessage::release_txt() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.S2CMessage.txt)
  if (has_txt()) {
    clear_has_Messages();
    ::realtime::messageservice::TextMessage* temp = Messages_.txt_;
    Messages_.txt_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void S2CMessage::set_allocated_txt(::realtime::messageservice::TextMessage* txt) {
  clear_Messages();
  if (txt) {
    set_has_txt();
    Messages_.txt_ = txt;
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.S2CMessage.txt)
}

// .realtime.messageservice.PhotoMessage photoMsg = 7;
bool S2CMessage::has_photomsg() const {
  return Messages_case() == kPhotoMsg;
}
void S2CMessage::set_has_photomsg() {
  _oneof_case_[0] = kPhotoMsg;
}
void S2CMessage::clear_photomsg() {
  if (has_photomsg()) {
    delete Messages_.photomsg_;
    clear_has_Messages();
  }
}
 const ::realtime::messageservice::PhotoMessage& S2CMessage::photomsg() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.photoMsg)
  return has_photomsg()
      ? *Messages_.photomsg_
      : ::realtime::messageservice::PhotoMessage::default_instance();
}
::realtime::messageservice::PhotoMessage* S2CMessage::mutable_photomsg() {
  if (!has_photomsg()) {
    clear_Messages();
    set_has_photomsg();
    Messages_.photomsg_ = new ::realtime::messageservice::PhotoMessage;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.S2CMessage.photoMsg)
  return Messages_.photomsg_;
}
::realtime::messageservice::PhotoMessage* S2CMessage::release_photomsg() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.S2CMessage.photoMsg)
  if (has_photomsg()) {
    clear_has_Messages();
    ::realtime::messageservice::PhotoMessage* temp = Messages_.photomsg_;
    Messages_.photomsg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void S2CMessage::set_allocated_photomsg(::realtime::messageservice::PhotoMessage* photomsg) {
  clear_Messages();
  if (photomsg) {
    set_has_photomsg();
    Messages_.photomsg_ = photomsg;
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.S2CMessage.photoMsg)
}

// .google.protobuf.Any anything = 20;
bool S2CMessage::has_anything() const {
  return this != internal_default_instance() && anything_ != NULL;
}
void S2CMessage::clear_anything() {
  if (GetArenaNoVirtual() == NULL && anything_ != NULL) delete anything_;
  anything_ = NULL;
}
const ::google::protobuf::Any& S2CMessage::anything() const {
  // @@protoc_insertion_point(field_get:realtime.messageservice.S2CMessage.anything)
  return anything_ != NULL ? *anything_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* S2CMessage::mutable_anything() {
  
  if (anything_ == NULL) {
    anything_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:realtime.messageservice.S2CMessage.anything)
  return anything_;
}
::google::protobuf::Any* S2CMessage::release_anything() {
  // @@protoc_insertion_point(field_release:realtime.messageservice.S2CMessage.anything)
  
  ::google::protobuf::Any* temp = anything_;
  anything_ = NULL;
  return temp;
}
void S2CMessage::set_allocated_anything(::google::protobuf::Any* anything) {
  delete anything_;
  anything_ = anything;
  if (anything) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:realtime.messageservice.S2CMessage.anything)
}

bool S2CMessage::has_Messages() const {
  return Messages_case() != MESSAGES_NOT_SET;
}
void S2CMessage::clear_has_Messages() {
  _oneof_case_[0] = MESSAGES_NOT_SET;
}
S2CMessage::MessagesCase S2CMessage::Messages_case() const {
  return S2CMessage::MessagesCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messageservice
}  // namespace realtime

// @@protoc_insertion_point(global_scope)
