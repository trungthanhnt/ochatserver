// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messageservice.proto

#include "messageservice.pb.h"
#include "messageservice.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace realtime {
namespace messageservice {

static const char* LoginService_method_names[] = {
  "/realtime.messageservice.LoginService/login",
};

std::unique_ptr< LoginService::Stub> LoginService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< LoginService::Stub> stub(new LoginService::Stub(channel));
  return stub;
}

LoginService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_login_(LoginService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LoginService::Stub::login(::grpc::ClientContext* context, const ::realtime::messageservice::LoginRequest& request, ::realtime::messageservice::LoginReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::realtime::messageservice::LoginReply>* LoginService::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::realtime::messageservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::realtime::messageservice::LoginReply>::Create(channel_.get(), cq, rpcmethod_login_, context, request);
}

LoginService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      LoginService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< LoginService::Service, ::realtime::messageservice::LoginRequest, ::realtime::messageservice::LoginReply>(
          std::mem_fn(&LoginService::Service::login), this)));
}

LoginService::Service::~Service() {
}

::grpc::Status LoginService::Service::login(::grpc::ServerContext* context, const ::realtime::messageservice::LoginRequest* request, ::realtime::messageservice::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


std::unique_ptr< OpenAPIService::Stub> OpenAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< OpenAPIService::Stub> stub(new OpenAPIService::Stub(channel));
  return stub;
}

OpenAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel){}

OpenAPIService::Service::Service() {
}

OpenAPIService::Service::~Service() {
}


static const char* MessageService_method_names[] = {
  "/realtime.messageservice.MessageService/exchangeMessages",
  "/realtime.messageservice.MessageService/sendSingleMessage",
  "/realtime.messageservice.MessageService/pollMessages",
  "/realtime.messageservice.MessageService/pushMessages",
};

std::unique_ptr< MessageService::Stub> MessageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MessageService::Stub> stub(new MessageService::Stub(channel));
  return stub;
}

MessageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_exchangeMessages_(MessageService_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_sendSingleMessage_(MessageService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pollMessages_(MessageService_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_pushMessages_(MessageService_method_names[3], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>* MessageService::Stub::exchangeMessagesRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>(channel_.get(), rpcmethod_exchangeMessages_, context);
}

::grpc::ClientAsyncReaderWriter< ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>* MessageService::Stub::AsyncexchangeMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>::Create(channel_.get(), cq, rpcmethod_exchangeMessages_, context, tag);
}

::grpc::Status MessageService::Stub::sendSingleMessage(::grpc::ClientContext* context, const ::realtime::messageservice::C2SMessage& request, ::realtime::messageservice::S2CMessage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_sendSingleMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::realtime::messageservice::S2CMessage>* MessageService::Stub::AsyncsendSingleMessageRaw(::grpc::ClientContext* context, const ::realtime::messageservice::C2SMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::realtime::messageservice::S2CMessage>::Create(channel_.get(), cq, rpcmethod_sendSingleMessage_, context, request);
}

::grpc::ClientReader< ::realtime::messageservice::S2CMessage>* MessageService::Stub::pollMessagesRaw(::grpc::ClientContext* context, const ::realtime::messageservice::C2SMessage& request) {
  return new ::grpc::ClientReader< ::realtime::messageservice::S2CMessage>(channel_.get(), rpcmethod_pollMessages_, context, request);
}

::grpc::ClientAsyncReader< ::realtime::messageservice::S2CMessage>* MessageService::Stub::AsyncpollMessagesRaw(::grpc::ClientContext* context, const ::realtime::messageservice::C2SMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::realtime::messageservice::S2CMessage>::Create(channel_.get(), cq, rpcmethod_pollMessages_, context, request, tag);
}

::grpc::ClientWriter< ::realtime::messageservice::C2SMessage>* MessageService::Stub::pushMessagesRaw(::grpc::ClientContext* context, ::realtime::messageservice::S2CMessage* response) {
  return new ::grpc::ClientWriter< ::realtime::messageservice::C2SMessage>(channel_.get(), rpcmethod_pushMessages_, context, response);
}

::grpc::ClientAsyncWriter< ::realtime::messageservice::C2SMessage>* MessageService::Stub::AsyncpushMessagesRaw(::grpc::ClientContext* context, ::realtime::messageservice::S2CMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::realtime::messageservice::C2SMessage>::Create(channel_.get(), cq, rpcmethod_pushMessages_, context, response, tag);
}

MessageService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      MessageService_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< MessageService::Service, ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>(
          std::mem_fn(&MessageService::Service::exchangeMessages), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessageService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessageService::Service, ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>(
          std::mem_fn(&MessageService::Service::sendSingleMessage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessageService_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< MessageService::Service, ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>(
          std::mem_fn(&MessageService::Service::pollMessages), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessageService_method_names[3],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< MessageService::Service, ::realtime::messageservice::C2SMessage, ::realtime::messageservice::S2CMessage>(
          std::mem_fn(&MessageService::Service::pushMessages), this)));
}

MessageService::Service::~Service() {
}

::grpc::Status MessageService::Service::exchangeMessages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::realtime::messageservice::S2CMessage, ::realtime::messageservice::C2SMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessageService::Service::sendSingleMessage(::grpc::ServerContext* context, const ::realtime::messageservice::C2SMessage* request, ::realtime::messageservice::S2CMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessageService::Service::pollMessages(::grpc::ServerContext* context, const ::realtime::messageservice::C2SMessage* request, ::grpc::ServerWriter< ::realtime::messageservice::S2CMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessageService::Service::pushMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::realtime::messageservice::C2SMessage>* reader, ::realtime::messageservice::S2CMessage* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace realtime
}  // namespace messageservice

